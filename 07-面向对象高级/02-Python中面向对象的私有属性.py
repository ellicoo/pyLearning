'''
什么是封装？
所谓的封装在Python代码中有两层含义：
① 把原始Python代码按照面向对象的设计思想进行封装操作
② 类中的封装主要体现在对类中的属性和方法的封装，将其封装起来，不允许外部随意操作与访问，从而保证数据安全

私有属性：明确的区分内外，控制外部对对隐藏的属性的操作行为
在类的内部，针对某些属性如果不想在类外部被直接设置与访问，可以考虑将其设置私有形式，基本语法：
class 类名(object):
    def __init__(self, name, age):
        self.name = name  # 公有属性
        self.__age = age  # 私有属性

在其他编程语言中，属性分为三大类：public公有，protected受保护，private私有 => Java
但是在Python代码中，只有公有属性和私有属性两种形式，通过__属性 = 属性值的方式就是私有属性

特点：不能直接在类的外部对其进行访问，但是可以在类的内部对其访问与操作
注意：私有属性只能在类的内部对其设置与访问，无法在类的外部对其进行访问与设置

应用场景：私有属性虽然不能在类的外部对其直接进行访问，但是我们可以通过"公共接口"实现对其访问
主要作用：明确的区分内外，控制外部对对隐藏的属性的操作行为

在编程语言中，大部分情况都是直接把所有属性封装为私有属性，然后每个属性定义两个公共方法set_xxx以及get_xxx来设置以及获取设置属性
'''
# 1、定义一个Girl类
class Girl(object):
    # 2、为其定义name和age两个属性，name设置为公有，age设置为私有
    def __init__(self, name):
        self.name = name
        self.__age = 18

    # 3、定义一个公共方法（公共接口），专门用于实现对年龄属性的设置
    def set_age(self, age):
        # 添加一个判断操作，判断年龄是否合法，如果合法，才能设置
        # 控制外部对私有属性的操作，起到保护数据的目的
        if not isinstance(age, int):  # int类型 => True,非int类型 => False
            print('您的设置有误，age非int类型')
            return  # 终止函数执行
        if 1 <= age <= 150:
            self.__age = age

    # 4、定义一个公共方法（公共接口），专门用于实现对年龄属性的访问
    def get_age(self):
        # 添加一个判断操作，判断操作对象对__age属性是否有访问权限
        return self.__age

# 3、实例化对象
g1 = Girl('小美')
# 4、设置私有属性
g1.set_age(180)
# 5、尝试访问公有属性与私有属性，观察效果
print(g1.name)
print(g1.get_age())


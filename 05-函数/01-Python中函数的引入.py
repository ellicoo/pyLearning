'''
案例1：编写一个打招呼程序，见到不同的老师，可以实现打招呼
虽然以下程序可以完成题目需求，但是略微有一些缺点：代码冗余（出现了大量的重复性代码）

案例2：升级以上程序，实现对重复性代码的封装操作 => 使用函数
为什么要有函数？函数的作用就是实现代码重用以及模块化编程操作

案例3：编写一个打招呼程序，可以实现向不同的老师打不同的招呼
期望效果：同一个函数，随着参数的不同可以实现不同的功能 => 参数实际就是以前学过的变量

案例4：函数的返回值，当函数调用结束后，可能给调用的位置一个返回结果（返回值）
函数在定义时要特别注意，不建议在函数执行完毕后，直接输出最终的结果，而是应该将函数的执行结果交还给"函数的调用位置"
注：return只是返回最终执行结果给函数的调用位置，本身没有输出功能；要想进行输入，必须结合print()来实现
'''
# 封装一个函数，用于实现打招呼程序
def greet(name):
    return '您好，' + name

# 1、见到张老师
content = greet('老张')
print(content)
# 2、见到李老师
# greet('老李')
# 3、见到王老师
# greet('老王')